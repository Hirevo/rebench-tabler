use std::cmp::Ordering;
use std::path::Path;

use anyhow::bail;
use clap::{ArgAction, Parser, ValueEnum};
use colored::Colorize;
use tableau::{Alignment, Cell, Row, Table};

mod format;
mod rebench;

use crate::format::TableStyle;
use crate::rebench::CandidateDataset;

#[derive(Debug, Clone, PartialEq, ValueEnum)]
enum AnalysisMode {
    /// Analyze results based on the absolute time difference, relative to the baseline.
    Difference,
    /// Analyze results based on the speedup ratio, relative to the baseline.
    Speedup,
    /// Analyze results based on the absolute fastest runtime among all candidates.
    Fastest,
}

#[derive(Debug, Clone, PartialEq, Parser)]
#[command(about, author, version)]
struct Opts {
    /// The style for the table's separators
    #[arg(long, default_value = "unicode")]
    table_style: TableStyle,
    /// The kind of analysis to be performed with the benchmark data
    #[arg(long, short)]
    mode: AnalysisMode,
    /// The threshold value (relative to the baseline) to signal an improvement or a regression (ignored if `--mode fastest`)
    #[arg(long, short, default_value = "0")]
    threshold: f64,
    /// The names to use for each dataset.
    #[arg(long, action = ArgAction::Set, num_args(0..))]
    names: Option<Vec<String>>,
    /// The dataset files, generated by ReBench
    datasets: Vec<String>,
}

#[allow(unused)]
fn compile_stats(vals: &[f64]) -> ((f64, f64), (f64, f64)) {
    let avg = vals.iter().sum::<f64>() / (vals.len() as f64);
    let dev = if vals.len() > 1 {
        let numerator = vals
            .iter()
            .copied()
            .map(|val| (val - avg).powi(2))
            .sum::<f64>();
        let denominator = (vals.len() - 1) as f64;

        (numerator / denominator).sqrt()
    } else {
        0.0
    };

    let min = vals
        .iter()
        .copied()
        .min_by(|a, b| a.partial_cmp(b).unwrap_or(Ordering::Equal))
        .unwrap();
    let max = vals
        .iter()
        .copied()
        .max_by(|a, b| a.partial_cmp(b).unwrap_or(Ordering::Equal))
        .unwrap();

    ((avg, dev), (min, max))
}

fn compute_difference((avg1, dev1): (f64, f64), (avg2, dev2): (f64, f64)) -> (f64, f64) {
    let avg = avg1 - avg2;
    let dev = (dev1.powi(2) + dev2.powi(2)).sqrt();
    (avg, dev)
}

fn compute_speedup((avg1, dev1): (f64, f64), (avg2, dev2): (f64, f64)) -> (f64, f64) {
    let avg = avg2 / avg1;
    let dev = avg * ((dev1 / avg1).powi(2) + (dev2 / avg2).powi(2)).sqrt();
    (avg, dev)
}

fn compute_average(values: &[(f64, f64)]) -> ((f64, f64), (f64, f64)) {
    let mut sum = 0.0;
    let mut stddev_sum = 0.0;
    let mut min = f64::INFINITY;
    let mut max = f64::NEG_INFINITY;
    for (value, stddev) in values.iter() {
        sum += value;
        stddev_sum += stddev * stddev;
        min = value.min(min);
        max = value.max(max);
    }
    let avg = sum / values.len() as f64;
    let stddev = (stddev_sum / values.len() as f64).sqrt();
    ((avg, stddev / (values.len() as f64).sqrt()), (min, max))
}

fn main() -> anyhow::Result<()> {
    let opts = Opts::parse();

    anyhow::ensure!(
        opts.names
            .as_ref()
            .map_or(true, |names| names.len() == opts.datasets.len()),
        "invalid number of dataset names"
    );

    let datasets: Vec<_> = opts
        .datasets
        .iter()
        .map(|path| CandidateDataset::from_file(&path))
        .collect::<anyhow::Result<_>>()?;

    let names: Vec<String> = opts.names.unwrap_or_else(|| {
        opts.datasets
            .iter()
            .map(|it| {
                Path::new(it)
                    .file_stem()
                    .map_or_else(|| it.clone(), |it| it.to_string_lossy().into_owned())
            })
            .collect()
    });

    let mut table = Table::new().with_style(opts.table_style.into()).with_row(
        Row::new()
            .with_cell(Cell::new("BENCHMARK".bold()).with_alignment(Alignment::Center))
            .with_cells(names.iter().map(|name| {
                Cell::new(name.to_uppercase().bold()).with_alignment(Alignment::Center)
            })),
    );

    let [base, others @ ..] = datasets.as_slice() else {
        bail!("at least one dataset must be passed");
    };

    let mut values: Vec<Vec<(f64, f64)>> = others
        .iter()
        .map(|_| Vec::with_capacity(base.len()))
        .collect();

    let mut first = true;
    for (bench, base_vals) in base.iter() {
        let mut row = Row::new();
        row.cells.reserve(opts.datasets.len() + 1);
        row.cells.push(Cell::new(bench.bold()));

        let ((base_avg, base_dev), (base_min, base_max)) = (
            (base_vals.mean(), base_vals.standard_deviation()),
            (base_vals.min(), base_vals.max()),
        );

        let base = format!(
            "{} ± {} ({}..{})",
            format!("{base_avg:.2} ms").bold(),
            format!("{base_dev:.2}").yellow().bold(),
            format!("{base_min:.2}").cyan().bold(),
            format!("{base_max:.2}").cyan().bold(),
        );
        row.cells.push(Cell::new(base));

        let maybe_values = match opts.mode {
            AnalysisMode::Difference => others
                .iter()
                .map(|map| {
                    let vals = map.get(bench)?;

                    let ((avg, dev), (min, max)) = (
                        (vals.mean(), vals.standard_deviation()),
                        (vals.min(), vals.max()),
                    );
                    let (diff_avg, diff_dev) = compute_difference((avg, dev), (base_avg, base_dev));
                    let (min, max) = (max - base_avg, min - base_avg);

                    let diff = format!(
                        "{} ± {} ({}..{})",
                        if (diff_avg / base_avg).abs() < opts.threshold {
                            format!("{diff_avg:.2} ms").bold()
                        } else if diff_avg > 1.0 {
                            format!("{diff_avg:.2} ms").red().bold()
                        } else {
                            format!("{diff_avg:.2} ms").green().bold()
                        },
                        format!("{diff_dev:.2}").yellow().bold(),
                        format!("{min:.2}").cyan().bold(),
                        format!("{max:.2}").cyan().bold(),
                    );
                    Some(Cell::new(diff))
                })
                .collect::<Option<Vec<_>>>(),
            AnalysisMode::Speedup => others
                .iter()
                .enumerate()
                .map(|(idx, map)| {
                    let vals = map.get(bench)?;

                    let ((avg, dev), (min, max)) = (
                        (vals.mean(), vals.standard_deviation()),
                        (vals.min(), vals.max()),
                    );
                    let (speedup_avg, speedup_dev) =
                        compute_speedup((avg, dev), (base_avg, base_dev));

                    let (min, max) = (base_avg / max, base_avg / min);

                    values[idx].push((speedup_avg, speedup_dev));

                    let speedup = format!(
                        "{} ± {} ({}..{})",
                        if (speedup_avg - 1.0).abs() < opts.threshold {
                            format!("{speedup_avg:.2}x").bold()
                        } else if speedup_avg < 1.0 {
                            format!("{speedup_avg:.2}x").red().bold()
                        } else {
                            format!("{speedup_avg:.2}x").green().bold()
                        },
                        format!("{speedup_dev:.2}").yellow().bold(),
                        format!("{min:.2}").cyan().bold(),
                        format!("{max:.2}").cyan().bold(),
                    );
                    Some(Cell::new(speedup))
                })
                .collect::<Option<Vec<_>>>(),
            AnalysisMode::Fastest => others
                .iter()
                .enumerate()
                .map(|(idx, map)| {
                    let vals = map.get(bench)?;

                    let ((avg, dev), (min, max)) = (
                        (vals.mean(), vals.standard_deviation()),
                        (vals.min(), vals.max()),
                    );
                    let (speedup_avg, speedup_dev) =
                        compute_speedup((avg, dev), (base_avg, base_dev));

                    values[idx].push((speedup_avg, speedup_dev));

                    let (min, max) = (base_avg / max, base_avg / min);

                    Some(((speedup_avg, speedup_dev), (min, max)))
                })
                .collect::<Option<Vec<_>>>()
                .map(|values| {
                    let (max_idx, _) = values
                        .iter()
                        .enumerate()
                        .max_by(|(_, ((a, b), _)), (_, ((c, d), _))| {
                            match a.partial_cmp(c).unwrap_or(Ordering::Equal) {
                                Ordering::Equal => d.partial_cmp(b).unwrap_or(Ordering::Equal),
                                ordering => ordering,
                            }
                        })
                        .unwrap();

                    values
                        .into_iter()
                        .enumerate()
                        .map(|(idx, ((speedup_avg, speedup_dev), (min, max)))| {
                            let speedup = format!(
                                "{} ± {} ({}..{})",
                                if speedup_avg < 1.0 {
                                    format!("{speedup_avg:.2}x").red().bold()
                                } else if idx == max_idx {
                                    format!("{speedup_avg:.2}x").green().bold()
                                } else {
                                    format!("{speedup_avg:.2}x").bold()
                                },
                                format!("{speedup_dev:.2}").yellow().bold(),
                                format!("{min:.2}").cyan().bold(),
                                format!("{max:.2}").cyan().bold(),
                            );
                            Cell::new(speedup)
                        })
                        .collect()
                }),
        };

        let Some(mut values) = maybe_values else {
            bail!("discarded bench due to missing data (benchmark: {bench})");
        };

        row.cells.append(&mut values);

        table
            .rows
            .push(if first { row } else { row.without_top_border() });

        first = false;
    }

    match opts.mode {
        AnalysisMode::Speedup => {
            table.rows.push(
                Row::new()
                    .with_cell(Cell::new("Average Speedup".bold()))
                    .with_cell(Cell::new("(baseline)".bold()).with_alignment(Alignment::Center))
                    .with_cells(values.into_iter().map(|values| {
                        let ((speedup_avg, speedup_dev), (min, max)) = compute_average(&values);
                        let speedup = format!(
                            "{} ± {} ({}..{})",
                            if (speedup_avg - 1.0).abs() < opts.threshold {
                                format!("{speedup_avg:.2}x").bold()
                            } else if speedup_avg < 1.0 {
                                format!("{speedup_avg:.2}x").red().bold()
                            } else {
                                format!("{speedup_avg:.2}x").green().bold()
                            },
                            format!("{speedup_dev:.2}").yellow().bold(),
                            format!("{min:.2}").cyan().bold(),
                            format!("{max:.2}").cyan().bold(),
                        );
                        Cell::new(speedup)
                    })),
            );
        }
        AnalysisMode::Fastest => {
            let values: Vec<_> = values
                .into_iter()
                .map(|values| compute_average(&values))
                .collect();

            let (max_idx, _) = values
                .iter()
                .enumerate()
                .max_by(|(_, ((a, b), _)), (_, ((c, d), _))| {
                    match a.partial_cmp(c).unwrap_or(Ordering::Equal) {
                        Ordering::Equal => d.partial_cmp(b).unwrap_or(Ordering::Equal),
                        ordering => ordering,
                    }
                })
                .unwrap();

            table.rows.push(
                Row::new()
                    .with_cell(Cell::new("Average Speedup".bold()))
                    .with_cell(Cell::new("(baseline)".bold()).with_alignment(Alignment::Center))
                    .with_cells(values.into_iter().enumerate().map(
                        |(idx, ((speedup_avg, speedup_dev), (min, max)))| {
                            let speedup = format!(
                                "{} ± {} ({}..{})",
                                if speedup_avg < 1.0 {
                                    format!("{:.2}x", speedup_avg).red().bold()
                                } else if idx == max_idx {
                                    format!("{:.2}x", speedup_avg).green().bold()
                                } else {
                                    format!("{:.2}x", speedup_avg).bold()
                                },
                                format!("{:.2}", speedup_dev).yellow().bold(),
                                format!("{:.2}", min).cyan().bold(),
                                format!("{:.2}", max).cyan().bold(),
                            );
                            Cell::new(speedup)
                        },
                    )),
            );
        }
        _ => {}
    }

    println!("{}", table.render());

    Ok(())
}
